package domain

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"fmt"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
)

// Local stub implementations.

// Client stub implementations.

// Server stub implementations.

// AutoMarshal implementations.

var _ codegen.AutoMarshal = &StampChallenge{}

func (x *StampChallenge) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("StampChallenge.WeaverMarshal: nil receiver"))
	}
	(x.SlotID).WeaverMarshal(enc)
	(x.Condition).WeaverMarshal(enc)
	enc.EncodeBinaryMarshaler(&x.UpdatedAt)
}

func (x *StampChallenge) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("StampChallenge.WeaverUnmarshal: nil receiver"))
	}
	(&x.SlotID).WeaverUnmarshal(dec)
	(&x.Condition).WeaverUnmarshal(dec)
	dec.DecodeBinaryUnmarshaler(&x.UpdatedAt)
}

var _ codegen.AutoMarshal = &StampChallenges{}

func (x *StampChallenges) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("StampChallenges.WeaverMarshal: nil receiver"))
	}
	serviceweaver_enc_slice_StampChallenge_a26e451e(enc, x.Items)
}

func (x *StampChallenges) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("StampChallenges.WeaverUnmarshal: nil receiver"))
	}
	x.Items = serviceweaver_dec_slice_StampChallenge_a26e451e(dec)
}

func serviceweaver_enc_slice_StampChallenge_a26e451e(enc *codegen.Encoder, arg []StampChallenge) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_StampChallenge_a26e451e(dec *codegen.Decoder) []StampChallenge {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]StampChallenge, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

var _ codegen.AutoMarshal = &ViewEvent{}

func (x *ViewEvent) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("ViewEvent.WeaverMarshal: nil receiver"))
	}
	(x.TrackID).WeaverMarshal(enc)
	(x.TalkID).WeaverMarshal(enc)
	(x.SlotID).WeaverMarshal(enc)
	(x.ViewingSeconds).WeaverMarshal(enc)
	enc.EncodeBinaryMarshaler(&x.CreatedAt)
}

func (x *ViewEvent) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("ViewEvent.WeaverUnmarshal: nil receiver"))
	}
	(&x.TrackID).WeaverUnmarshal(dec)
	(&x.TalkID).WeaverUnmarshal(dec)
	(&x.SlotID).WeaverUnmarshal(dec)
	(&x.ViewingSeconds).WeaverUnmarshal(dec)
	dec.DecodeBinaryUnmarshaler(&x.CreatedAt)
}

var _ codegen.AutoMarshal = &ViewEvents{}

func (x *ViewEvents) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("ViewEvents.WeaverMarshal: nil receiver"))
	}
	serviceweaver_enc_slice_ViewEvent_de49073f(enc, x.Items)
}

func (x *ViewEvents) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("ViewEvents.WeaverUnmarshal: nil receiver"))
	}
	x.Items = serviceweaver_dec_slice_ViewEvent_de49073f(dec)
}

func serviceweaver_enc_slice_ViewEvent_de49073f(enc *codegen.Encoder, arg []ViewEvent) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_ViewEvent_de49073f(dec *codegen.Decoder) []ViewEvent {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]ViewEvent, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}
