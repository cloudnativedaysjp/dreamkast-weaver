// Code generated by MockGen. DO NOT EDIT.
// Source: dreamkast.go

// Package dreamkast is a generated GoMock package.
package dreamkast

import (
	context "context"
	domain "dreamkast-weaver/internal/dkui/domain"
	value "dreamkast-weaver/internal/dkui/value"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDkApiClient is a mock of DkApiClient interface.
type MockDkApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockDkApiClientMockRecorder
}

// MockDkApiClientMockRecorder is the mock recorder for MockDkApiClient.
type MockDkApiClientMockRecorder struct {
	mock *MockDkApiClient
}

// NewMockDkApiClient creates a new mock instance.
func NewMockDkApiClient(ctrl *gomock.Controller) *MockDkApiClient {
	mock := &MockDkApiClient{ctrl: ctrl}
	mock.recorder = &MockDkApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDkApiClient) EXPECT() *MockDkApiClientMockRecorder {
	return m.recorder
}

// GetTracks mocks base method.
func (m *MockDkApiClient) GetTracks(ctx context.Context, n value.ConfName) (*domain.ViewerCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracks", ctx, n)
	ret0, _ := ret[0].(*domain.ViewerCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracks indicates an expected call of GetTracks.
func (mr *MockDkApiClientMockRecorder) GetTracks(ctx, n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracks", reflect.TypeOf((*MockDkApiClient)(nil).GetTracks), ctx, n)
}
