package dkui

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"dreamkast-weaver/internal/graph/model"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:     "dreamkast-weaver/internal/dkui/Service",
		Iface:    reflect.TypeOf((*Service)(nil)).Elem(),
		New:      func() any { return &ServiceImpl{} },
		ConfigFn: func(i any) any { return i.(*ServiceImpl).WithConfig.Config() },
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return service_local_stub{impl: impl.(Service), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return service_client_stub{stub: stub, createWatchEventMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "CreateWatchEvent"}), stampOnlineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "StampOnline"}), stampOnSiteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "StampOnSite"}), viewingSlotsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "ViewingSlots"}), stampChallengesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "StampChallenges"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return service_server_stub{impl: impl.(Service), addLoad: addLoad}
		},
	})
}

// Local stub implementations.

type service_local_stub struct {
	impl   Service
	tracer trace.Tracer
}

func (s service_local_stub) CreateWatchEvent(ctx context.Context, a0 model.CreateWatchEventInput) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.CreateWatchEvent", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.CreateWatchEvent(ctx, a0)
}

func (s service_local_stub) StampOnline(ctx context.Context, a0 model.StampOnlineInput) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.StampOnline", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.StampOnline(ctx, a0)
}

func (s service_local_stub) StampOnSite(ctx context.Context, a0 model.StampOnSiteInput) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.StampOnSite", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.StampOnSite(ctx, a0)
}

func (s service_local_stub) ViewingSlots(ctx context.Context, a0 model.ConfName, a1 int) (r0 []*model.ViewingSlot, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.ViewingSlots", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ViewingSlots(ctx, a0, a1)
}

func (s service_local_stub) StampChallenges(ctx context.Context, a0 model.ConfName, a1 int) (r0 []*model.StampChallenge, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.StampChallenges", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.StampChallenges(ctx, a0, a1)
}

// Client stub implementations.

type service_client_stub struct {
	stub                    codegen.Stub
	createWatchEventMetrics *codegen.MethodMetrics
	stampOnlineMetrics      *codegen.MethodMetrics
	stampOnSiteMetrics      *codegen.MethodMetrics
	viewingSlotsMetrics     *codegen.MethodMetrics
	stampChallengesMetrics  *codegen.MethodMetrics
}

func (s service_client_stub) CreateWatchEvent(ctx context.Context, a0 model.CreateWatchEventInput) (err error) {
	// Update metrics.
	start := time.Now()
	s.createWatchEventMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.CreateWatchEvent", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.createWatchEventMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.createWatchEventMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.createWatchEventMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.createWatchEventMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s service_client_stub) StampOnline(ctx context.Context, a0 model.StampOnlineInput) (err error) {
	// Update metrics.
	start := time.Now()
	s.stampOnlineMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.StampOnline", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.stampOnlineMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.stampOnlineMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.stampOnlineMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.stampOnlineMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s service_client_stub) StampOnSite(ctx context.Context, a0 model.StampOnSiteInput) (err error) {
	// Update metrics.
	start := time.Now()
	s.stampOnSiteMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.StampOnSite", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.stampOnSiteMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.stampOnSiteMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.stampOnSiteMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.stampOnSiteMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s service_client_stub) ViewingSlots(ctx context.Context, a0 model.ConfName, a1 int) (r0 []*model.ViewingSlot, err error) {
	// Update metrics.
	start := time.Now()
	s.viewingSlotsMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.ViewingSlots", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.viewingSlotsMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.viewingSlotsMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.String((string)(a0))
	enc.Int(a1)
	var shardKey uint64

	// Call the remote method.
	s.viewingSlotsMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.viewingSlotsMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_ptr_ViewingSlot_2dca86e5(dec)
	err = dec.Error()
	return
}

func (s service_client_stub) StampChallenges(ctx context.Context, a0 model.ConfName, a1 int) (r0 []*model.StampChallenge, err error) {
	// Update metrics.
	start := time.Now()
	s.stampChallengesMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.StampChallenges", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.stampChallengesMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.stampChallengesMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	enc.String((string)(a0))
	enc.Int(a1)
	var shardKey uint64

	// Call the remote method.
	s.stampChallengesMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.stampChallengesMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_slice_ptr_StampChallenge_30144bfb(dec)
	err = dec.Error()
	return
}

// Server stub implementations.

type service_server_stub struct {
	impl    Service
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s service_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "CreateWatchEvent":
		return s.createWatchEvent
	case "StampOnline":
		return s.stampOnline
	case "StampOnSite":
		return s.stampOnSite
	case "ViewingSlots":
		return s.viewingSlots
	case "StampChallenges":
		return s.stampChallenges
	default:
		return nil
	}
}

func (s service_server_stub) createWatchEvent(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 model.CreateWatchEventInput
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.CreateWatchEvent(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) stampOnline(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 model.StampOnlineInput
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.StampOnline(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) stampOnSite(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 model.StampOnSiteInput
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.StampOnSite(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) viewingSlots(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 model.ConfName
	*(*string)(&a0) = dec.String()
	var a1 int
	a1 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ViewingSlots(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_ptr_ViewingSlot_2dca86e5(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) stampChallenges(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 model.ConfName
	*(*string)(&a0) = dec.String()
	var a1 int
	a1 = dec.Int()

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.StampChallenges(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_ptr_StampChallenge_30144bfb(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// Encoding/decoding implementations.

func serviceweaver_enc_ptr_StampChallenge_abbc9f62(enc *codegen.Encoder, arg *model.StampChallenge) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_StampChallenge_abbc9f62(dec *codegen.Decoder) *model.StampChallenge {
	if !dec.Bool() {
		return nil
	}
	var res model.StampChallenge
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_slice_ptr_StampChallenge_30144bfb(enc *codegen.Encoder, arg []*model.StampChallenge) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		serviceweaver_enc_ptr_StampChallenge_abbc9f62(enc, arg[i])
	}
}

func serviceweaver_dec_slice_ptr_StampChallenge_30144bfb(dec *codegen.Decoder) []*model.StampChallenge {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]*model.StampChallenge, n)
	for i := 0; i < n; i++ {
		res[i] = serviceweaver_dec_ptr_StampChallenge_abbc9f62(dec)
	}
	return res
}

func serviceweaver_enc_ptr_ViewingSlot_0e8fde7a(enc *codegen.Encoder, arg *model.ViewingSlot) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_ViewingSlot_0e8fde7a(dec *codegen.Decoder) *model.ViewingSlot {
	if !dec.Bool() {
		return nil
	}
	var res model.ViewingSlot
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_slice_ptr_ViewingSlot_2dca86e5(enc *codegen.Encoder, arg []*model.ViewingSlot) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		serviceweaver_enc_ptr_ViewingSlot_0e8fde7a(enc, arg[i])
	}
}

func serviceweaver_dec_slice_ptr_ViewingSlot_2dca86e5(dec *codegen.Decoder) []*model.ViewingSlot {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]*model.ViewingSlot, n)
	for i := 0; i < n; i++ {
		res[i] = serviceweaver_dec_ptr_ViewingSlot_0e8fde7a(dec)
	}
	return res
}
