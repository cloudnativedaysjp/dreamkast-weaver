// go:build !ignoreWeaverGen

package dkui

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"dreamkast-weaver/internal/dkui/domain"
	"dreamkast-weaver/internal/dkui/value"
	"errors"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:     "dreamkast-weaver/internal/dkui/Service",
		Iface:    reflect.TypeOf((*Service)(nil)).Elem(),
		Impl:     reflect.TypeOf(ServiceImpl{}),
		ConfigFn: func(i any) any { return i.(*ServiceImpl).WithConfig.Config() },
		LocalStubFn: func(impl any, tracer trace.Tracer) any {
			return service_local_stub{impl: impl.(Service), tracer: tracer}
		},
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return service_client_stub{stub: stub, createViewEventMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "CreateViewEvent"}), getViewerCountMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "GetViewerCount"}), saveViewerCountMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "SaveViewerCount"}), stampChallengesMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "StampChallenges"}), stampOnSiteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "StampOnSite"}), stampOnlineMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "StampOnline"}), viewingEventsMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/dkui/Service", Method: "ViewingEvents"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return service_server_stub{impl: impl.(Service), addLoad: addLoad}
		},
		RefData: "",
	})
}

// Local stub implementations.

type service_local_stub struct {
	impl   Service
	tracer trace.Tracer
}

func (s service_local_stub) CreateViewEvent(ctx context.Context, a0 Profile, a1 CreateViewEventRequest) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.CreateViewEvent", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.CreateViewEvent(ctx, a0, a1)
}

func (s service_local_stub) GetViewerCount(ctx context.Context, a0 value.ConfName, a1 value.TrackID) (r0 *domain.ViewerCount, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.GetViewerCount", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetViewerCount(ctx, a0, a1)
}

func (s service_local_stub) SaveViewerCount(ctx context.Context, a0 value.ConfName) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.SaveViewerCount", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.SaveViewerCount(ctx, a0)
}

func (s service_local_stub) StampChallenges(ctx context.Context, a0 Profile) (r0 *domain.StampChallenges, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.StampChallenges", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.StampChallenges(ctx, a0)
}

func (s service_local_stub) StampOnSite(ctx context.Context, a0 Profile, a1 StampRequest) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.StampOnSite", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.StampOnSite(ctx, a0, a1)
}

func (s service_local_stub) StampOnline(ctx context.Context, a0 Profile, a1 value.SlotID) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.StampOnline", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.StampOnline(ctx, a0, a1)
}

func (s service_local_stub) ViewingEvents(ctx context.Context, a0 Profile) (r0 *domain.ViewEvents, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "dkui.Service.ViewingEvents", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.ViewingEvents(ctx, a0)
}

// Client stub implementations.

type service_client_stub struct {
	stub                   codegen.Stub
	createViewEventMetrics *codegen.MethodMetrics
	getViewerCountMetrics  *codegen.MethodMetrics
	saveViewerCountMetrics *codegen.MethodMetrics
	stampChallengesMetrics *codegen.MethodMetrics
	stampOnSiteMetrics     *codegen.MethodMetrics
	stampOnlineMetrics     *codegen.MethodMetrics
	viewingEventsMetrics   *codegen.MethodMetrics
}

func (s service_client_stub) CreateViewEvent(ctx context.Context, a0 Profile, a1 CreateViewEventRequest) (err error) {
	// Update metrics.
	start := time.Now()
	s.createViewEventMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.CreateViewEvent", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.createViewEventMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.createViewEventMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	(a1).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.createViewEventMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.createViewEventMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s service_client_stub) GetViewerCount(ctx context.Context, a0 value.ConfName, a1 value.TrackID) (r0 *domain.ViewerCount, err error) {
	// Update metrics.
	start := time.Now()
	s.getViewerCountMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.GetViewerCount", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getViewerCountMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getViewerCountMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	(a1).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.getViewerCountMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.getViewerCountMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_ViewerCount_9385bd07(dec)
	err = dec.Error()
	return
}

func (s service_client_stub) SaveViewerCount(ctx context.Context, a0 value.ConfName) (err error) {
	// Update metrics.
	start := time.Now()
	s.saveViewerCountMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.SaveViewerCount", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.saveViewerCountMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.saveViewerCountMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.saveViewerCountMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 2, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.saveViewerCountMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s service_client_stub) StampChallenges(ctx context.Context, a0 Profile) (r0 *domain.StampChallenges, err error) {
	// Update metrics.
	start := time.Now()
	s.stampChallengesMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.StampChallenges", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.stampChallengesMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.stampChallengesMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.stampChallengesMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 3, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.stampChallengesMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_StampChallenges_fd60f90f(dec)
	err = dec.Error()
	return
}

func (s service_client_stub) StampOnSite(ctx context.Context, a0 Profile, a1 StampRequest) (err error) {
	// Update metrics.
	start := time.Now()
	s.stampOnSiteMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.StampOnSite", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.stampOnSiteMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.stampOnSiteMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	(a1).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.stampOnSiteMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 4, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.stampOnSiteMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s service_client_stub) StampOnline(ctx context.Context, a0 Profile, a1 value.SlotID) (err error) {
	// Update metrics.
	start := time.Now()
	s.stampOnlineMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.StampOnline", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.stampOnlineMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.stampOnlineMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	(a1).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.stampOnlineMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 5, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.stampOnlineMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s service_client_stub) ViewingEvents(ctx context.Context, a0 Profile) (r0 *domain.ViewEvents, err error) {
	// Update metrics.
	start := time.Now()
	s.viewingEventsMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "dkui.Service.ViewingEvents", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
			if err != nil {
				err = errors.Join(weaver.RemoteCallError, err)
			}
		}

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.viewingEventsMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.viewingEventsMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.viewingEventsMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 6, enc.Data(), shardKey)
	if err != nil {
		err = errors.Join(weaver.RemoteCallError, err)
		return
	}
	s.viewingEventsMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	r0 = serviceweaver_dec_ptr_ViewEvents_fd9e24a3(dec)
	err = dec.Error()
	return
}

// Server stub implementations.

type service_server_stub struct {
	impl    Service
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s service_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "CreateViewEvent":
		return s.createViewEvent
	case "GetViewerCount":
		return s.getViewerCount
	case "SaveViewerCount":
		return s.saveViewerCount
	case "StampChallenges":
		return s.stampChallenges
	case "StampOnSite":
		return s.stampOnSite
	case "StampOnline":
		return s.stampOnline
	case "ViewingEvents":
		return s.viewingEvents
	default:
		return nil
	}
}

func (s service_server_stub) createViewEvent(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 Profile
	(&a0).WeaverUnmarshal(dec)
	var a1 CreateViewEventRequest
	(&a1).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.CreateViewEvent(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) getViewerCount(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 value.ConfName
	(&a0).WeaverUnmarshal(dec)
	var a1 value.TrackID
	(&a1).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetViewerCount(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_ViewerCount_9385bd07(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) saveViewerCount(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 value.ConfName
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.SaveViewerCount(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) stampChallenges(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 Profile
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.StampChallenges(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_StampChallenges_fd60f90f(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) stampOnSite(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 Profile
	(&a0).WeaverUnmarshal(dec)
	var a1 StampRequest
	(&a1).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.StampOnSite(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) stampOnline(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 Profile
	(&a0).WeaverUnmarshal(dec)
	var a1 value.SlotID
	(&a1).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.StampOnline(ctx, a0, a1)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s service_server_stub) viewingEvents(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 Profile
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.ViewingEvents(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_ptr_ViewEvents_fd9e24a3(enc, r0)
	enc.Error(appErr)
	return enc.Data(), nil
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = &CreateViewEventRequest{}

func (x *CreateViewEventRequest) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("CreateViewEventRequest.WeaverMarshal: nil receiver"))
	}
	(x.TrackID).WeaverMarshal(enc)
	(x.TalkID).WeaverMarshal(enc)
	(x.SlotID).WeaverMarshal(enc)
}

func (x *CreateViewEventRequest) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("CreateViewEventRequest.WeaverUnmarshal: nil receiver"))
	}
	(&x.TrackID).WeaverUnmarshal(dec)
	(&x.TalkID).WeaverUnmarshal(dec)
	(&x.SlotID).WeaverUnmarshal(dec)
}

var _ codegen.AutoMarshal = &Profile{}

func (x *Profile) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("Profile.WeaverMarshal: nil receiver"))
	}
	(x.ID).WeaverMarshal(enc)
	(x.ConfName).WeaverMarshal(enc)
}

func (x *Profile) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("Profile.WeaverUnmarshal: nil receiver"))
	}
	(&x.ID).WeaverUnmarshal(dec)
	(&x.ConfName).WeaverUnmarshal(dec)
}

var _ codegen.AutoMarshal = &StampRequest{}

func (x *StampRequest) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("StampRequest.WeaverMarshal: nil receiver"))
	}
	(x.TrackID).WeaverMarshal(enc)
	(x.TalkID).WeaverMarshal(enc)
	(x.SlotID).WeaverMarshal(enc)
}

func (x *StampRequest) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("StampRequest.WeaverUnmarshal: nil receiver"))
	}
	(&x.TrackID).WeaverUnmarshal(dec)
	(&x.TalkID).WeaverUnmarshal(dec)
	(&x.SlotID).WeaverUnmarshal(dec)
}

// Encoding/decoding implementations.

func serviceweaver_enc_ptr_ViewerCount_9385bd07(enc *codegen.Encoder, arg *domain.ViewerCount) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_ViewerCount_9385bd07(dec *codegen.Decoder) *domain.ViewerCount {
	if !dec.Bool() {
		return nil
	}
	var res domain.ViewerCount
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_StampChallenges_fd60f90f(enc *codegen.Encoder, arg *domain.StampChallenges) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_StampChallenges_fd60f90f(dec *codegen.Decoder) *domain.StampChallenges {
	if !dec.Bool() {
		return nil
	}
	var res domain.StampChallenges
	(&res).WeaverUnmarshal(dec)
	return &res
}

func serviceweaver_enc_ptr_ViewEvents_fd9e24a3(enc *codegen.Encoder, arg *domain.ViewEvents) {
	if arg == nil {
		enc.Bool(false)
	} else {
		enc.Bool(true)
		(*arg).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_ptr_ViewEvents_fd9e24a3(dec *codegen.Decoder) *domain.ViewEvents {
	if !dec.Bool() {
		return nil
	}
	var res domain.ViewEvents
	(&res).WeaverUnmarshal(dec)
	return &res
}
