package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"dreamkast-weaver/internal/graph/model"
	"fmt"
)

// Vote is the resolver for the vote field.
func (r *mutationResolver) Vote(ctx context.Context, input model.VoteInput) (*bool, error) {
	panic(fmt.Errorf("not implemented"))
	// if err := r.CfpVoter.Vote(ctx, cfp.VoteRequest{
	// 	ConfName: input.ConfName,
	// 	TalkID:   int32(input.TalkID),
	// 	GlobalIP: []byte{},
	// }); err != nil {
	// 	log.Printf("error: %v", err)
	// 	return nil, err
	// }

	// return nil, nil
}

// StampOnline is the resolver for the stampOnline field.
func (r *mutationResolver) StampOnline(ctx context.Context, input model.StampOnlineInput) (*bool, error) {
	panic(fmt.Errorf("not implemented: StampOnline - stampOnline"))
}

// StampOnSite is the resolver for the stampOnSite field.
func (r *mutationResolver) StampOnSite(ctx context.Context, input model.StampOnSiteInput) (*bool, error) {
	panic(fmt.Errorf("not implemented: StampOnSite - stampOnSite"))
}

// CreateWatchEvent is the resolver for the createWatchEvent field.
func (r *mutationResolver) CreateWatchEvent(ctx context.Context, input model.CreateWatchEventInput) (*bool, error) {
	panic(fmt.Errorf("not implemented: CreateWatchEvent - createWatchEvent"))
}

// VoteCounts is the resolver for the voteCounts field.
func (r *queryResolver) VoteCounts(ctx context.Context, confName model.ConfName) ([]*model.VoteCount, error) {
	panic(fmt.Errorf("not implemented"))
	// counts, err := r.CfpVoter.GetCount(ctx, cfp.GetCountRequest{
	// 	ConfName: *confName,
	// })
	// if err != nil {
	// 	log.Printf("error: %v", err)
	// 	return nil, err
	// }

	// var resp []*model.VoteCount
	// for _, v := range counts {
	// 	resp = append(resp, &model.VoteCount{
	// 		TalkID: int(v.TalkID),
	// 		Count:  v.Count,
	// 	})
	// }

	// return resp, nil
}

// ViewingSlots is the resolver for the viewingSlots field.
func (r *queryResolver) ViewingSlots(ctx context.Context, confName model.ConfName, profileID string) ([]*model.ViewingSlot, error) {
	panic(fmt.Errorf("not implemented: ViewingSlots - viewingSlots"))
}

// StampChallenges is the resolver for the stampChallenges field.
func (r *queryResolver) StampChallenges(ctx context.Context, confName model.ConfName, profileID string) ([]*model.StampChallenge, error) {
	panic(fmt.Errorf("not implemented: StampChallenges - stampChallenges"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
