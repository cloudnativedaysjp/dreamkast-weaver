package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"dreamkast-weaver/internal/dkui"
	"dreamkast-weaver/internal/dkui/value"
	"dreamkast-weaver/internal/graph/model"
	"errors"
)

// Vote is the resolver for the vote field.
func (r *mutationResolver) Vote(ctx context.Context, input model.VoteInput) (*bool, error) {
	if err := r.CfpService.Vote(ctx, input); err != nil {
		return nil, err
	}
	return nil, nil
}

// StampOnline is the resolver for the stampOnline field.
func (r *mutationResolver) StampOnline(ctx context.Context, input model.StampOnlineInput) (*bool, error) {
	if err := r.DkUiService.StampOnline(ctx, input); err != nil {
		return nil, err
	}
	return nil, nil
}

// StampOnSite is the resolver for the stampOnSite field.
func (r *mutationResolver) StampOnSite(ctx context.Context, input model.StampOnSiteInput) (*bool, error) {
	if err := r.DkUiService.StampOnSite(ctx, input); err != nil {
		return nil, err
	}
	return nil, nil
}

// CreateViewEvent is the resolver for the createViewEvent field.
func (r *mutationResolver) CreateViewEvent(ctx context.Context, input model.CreateViewEventInput) (*bool, error) {

	var e, err error
	profile := dkui.Profile{}
	profile.ConfName, e = value.NewConfName(value.ConferenceKind(input.ConfName))
	err = errors.Join(err, e)
	profile.ID, e = value.NewProfileID(int32(input.ProfileID))
	err = errors.Join(err, e)

	req := dkui.CreateViewEventRequest{}
	req.TrackID, e = value.NewTrackID(int32(input.TrackID))
	err = errors.Join(err, e)
	req.TalkID, e = value.NewTalkID(int32(input.TalkID))
	err = errors.Join(err, e)
	req.SlotID, e = value.NewSlotID(int32(input.SlotID))
	err = errors.Join(err, e)
	if err != nil {
		return nil, err
	}

	if err := r.DkUiService.CreateViewEvent(ctx, profile, req); err != nil {
		return nil, err
	}
	return nil, nil
}

// VoteCounts is the resolver for the voteCounts field.
func (r *queryResolver) VoteCounts(ctx context.Context, confName model.ConfName) ([]*model.VoteCount, error) {
	resp, err := r.CfpService.VoteCounts(ctx, confName)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// ViewingSlots is the resolver for the viewingSlots field.
func (r *queryResolver) ViewingSlots(ctx context.Context, confName model.ConfName, profileID int) ([]*model.ViewingSlot, error) {
	resp, err := r.DkUiService.ViewingSlots(ctx, confName, profileID)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// StampChallenges is the resolver for the stampChallenges field.
func (r *queryResolver) StampChallenges(ctx context.Context, confName model.ConfName, profileID int) ([]*model.StampChallenge, error) {
	resp, err := r.DkUiService.StampChallenges(ctx, confName, profileID)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
