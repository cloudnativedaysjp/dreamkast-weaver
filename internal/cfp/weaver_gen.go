package cfp

// Code generated by "weaver generate". DO NOT EDIT.
import (
	"context"
	"fmt"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
	"reflect"
	"time"
)

func init() {
	codegen.Register(codegen.Registration{
		Name:        "dreamkast-weaver/internal/cfp/Voter",
		Iface:       reflect.TypeOf((*Voter)(nil)).Elem(),
		New:         func() any { return &VoterImpl{} },
		ConfigFn:    func(i any) any { return i.(*VoterImpl).WithConfig.Config() },
		LocalStubFn: func(impl any, tracer trace.Tracer) any { return voter_local_stub{impl: impl.(Voter), tracer: tracer} },
		ClientStubFn: func(stub codegen.Stub, caller string) any {
			return voter_client_stub{stub: stub, voteMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/cfp/Voter", Method: "Vote"}), getCountMetrics: codegen.MethodMetricsFor(codegen.MethodLabels{Caller: caller, Component: "dreamkast-weaver/internal/cfp/Voter", Method: "GetCount"})}
		},
		ServerStubFn: func(impl any, addLoad func(uint64, float64)) codegen.Server {
			return voter_server_stub{impl: impl.(Voter), addLoad: addLoad}
		},
	})
}

// Local stub implementations.

type voter_local_stub struct {
	impl   Voter
	tracer trace.Tracer
}

func (s voter_local_stub) Vote(ctx context.Context, a0 VoteRequest) (err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "cfp.Voter.Vote", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.Vote(ctx, a0)
}

func (s voter_local_stub) GetCount(ctx context.Context, a0 GetCountRequest) (r0 GetCountResponse, err error) {
	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.tracer.Start(ctx, "cfp.Voter.GetCount", trace.WithSpanKind(trace.SpanKindInternal))
		defer func() {
			if err != nil {
				span.RecordError(err)
				span.SetStatus(codes.Error, err.Error())
			}
			span.End()
		}()
	}

	return s.impl.GetCount(ctx, a0)
}

// Client stub implementations.

type voter_client_stub struct {
	stub            codegen.Stub
	voteMetrics     *codegen.MethodMetrics
	getCountMetrics *codegen.MethodMetrics
}

func (s voter_client_stub) Vote(ctx context.Context, a0 VoteRequest) (err error) {
	// Update metrics.
	start := time.Now()
	s.voteMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "cfp.Voter.Vote", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.voteMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.voteMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Encode arguments.
	enc := codegen.NewEncoder()
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.voteMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 1, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.voteMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	err = dec.Error()
	return
}

func (s voter_client_stub) GetCount(ctx context.Context, a0 GetCountRequest) (r0 GetCountResponse, err error) {
	// Update metrics.
	start := time.Now()
	s.getCountMetrics.Count.Add(1)

	span := trace.SpanFromContext(ctx)
	if span.SpanContext().IsValid() {
		// Create a child span for this method.
		ctx, span = s.stub.Tracer().Start(ctx, "cfp.Voter.GetCount", trace.WithSpanKind(trace.SpanKindClient))
	}

	defer func() {
		// Catch and return any panics detected during encoding/decoding/rpc.
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
		err = s.stub.WrapError(err)

		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, err.Error())
			s.getCountMetrics.ErrorCount.Add(1)
		}
		span.End()

		s.getCountMetrics.Latency.Put(float64(time.Since(start).Microseconds()))
	}()

	// Preallocate a buffer of the right size.
	size := 0
	size += serviceweaver_size_GetCountRequest_b4550e28(&a0)
	enc := codegen.NewEncoder()
	enc.Reset(size)

	// Encode arguments.
	(a0).WeaverMarshal(enc)
	var shardKey uint64

	// Call the remote method.
	s.getCountMetrics.BytesRequest.Put(float64(len(enc.Data())))
	var results []byte
	results, err = s.stub.Run(ctx, 0, enc.Data(), shardKey)
	if err != nil {
		return
	}
	s.getCountMetrics.BytesReply.Put(float64(len(results)))

	// Decode the results.
	dec := codegen.NewDecoder(results)
	*(*[]VoteCount)(&r0) = serviceweaver_dec_slice_VoteCount_ae73e25b(dec)
	err = dec.Error()
	return
}

// Server stub implementations.

type voter_server_stub struct {
	impl    Voter
	addLoad func(key uint64, load float64)
}

// GetStubFn implements the stub.Server interface.
func (s voter_server_stub) GetStubFn(method string) func(ctx context.Context, args []byte) ([]byte, error) {
	switch method {
	case "Vote":
		return s.vote
	case "GetCount":
		return s.getCount
	default:
		return nil
	}
}

func (s voter_server_stub) vote(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 VoteRequest
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	appErr := s.impl.Vote(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	enc.Error(appErr)
	return enc.Data(), nil
}

func (s voter_server_stub) getCount(ctx context.Context, args []byte) (res []byte, err error) {
	// Catch and return any panics detected during encoding/decoding/rpc.
	defer func() {
		if err == nil {
			err = codegen.CatchPanics(recover())
		}
	}()

	// Decode arguments.
	dec := codegen.NewDecoder(args)
	var a0 GetCountRequest
	(&a0).WeaverUnmarshal(dec)

	// TODO(rgrandl): The deferred function above will recover from panics in the
	// user code: fix this.
	// Call the local method.
	r0, appErr := s.impl.GetCount(ctx, a0)

	// Encode the results.
	enc := codegen.NewEncoder()
	serviceweaver_enc_slice_VoteCount_ae73e25b(enc, ([]VoteCount)(r0))
	enc.Error(appErr)
	return enc.Data(), nil
}

// AutoMarshal implementations.

var _ codegen.AutoMarshal = &GetCountRequest{}

func (x *GetCountRequest) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("GetCountRequest.WeaverMarshal: nil receiver"))
	}
	enc.String(x.ConfName)
}

func (x *GetCountRequest) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("GetCountRequest.WeaverUnmarshal: nil receiver"))
	}
	x.ConfName = dec.String()
}

var _ codegen.AutoMarshal = &VoteCount{}

func (x *VoteCount) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("VoteCount.WeaverMarshal: nil receiver"))
	}
	enc.Int32(x.TalkID)
	enc.Int(x.Count)
}

func (x *VoteCount) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("VoteCount.WeaverUnmarshal: nil receiver"))
	}
	x.TalkID = dec.Int32()
	x.Count = dec.Int()
}

var _ codegen.AutoMarshal = &VoteRequest{}

func (x *VoteRequest) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("VoteRequest.WeaverMarshal: nil receiver"))
	}
	enc.String(x.ConfName)
	enc.Int32(x.TalkID)
	serviceweaver_enc_slice_byte_87461245(enc, ([]byte)(x.GlobalIP))
}

func (x *VoteRequest) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("VoteRequest.WeaverUnmarshal: nil receiver"))
	}
	x.ConfName = dec.String()
	x.TalkID = dec.Int32()
	*(*[]byte)(&x.GlobalIP) = serviceweaver_dec_slice_byte_87461245(dec)
}

func serviceweaver_enc_slice_byte_87461245(enc *codegen.Encoder, arg []byte) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Byte(arg[i])
	}
}

func serviceweaver_dec_slice_byte_87461245(dec *codegen.Decoder) []byte {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]byte, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Byte()
	}
	return res
}

// Encoding/decoding implementations.

func serviceweaver_enc_slice_VoteCount_ae73e25b(enc *codegen.Encoder, arg []VoteCount) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_VoteCount_ae73e25b(dec *codegen.Decoder) []VoteCount {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]VoteCount, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

// Size implementations.

// serviceweaver_size_GetCountRequest_b4550e28 returns the size (in bytes) of the serialization
// of the provided type.
func serviceweaver_size_GetCountRequest_b4550e28(x *GetCountRequest) int {
	size := 0
	size += 0
	size += (4 + len(x.ConfName))
	return size
}
