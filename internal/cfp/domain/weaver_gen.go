// Code generated by "weaver generate". DO NOT EDIT.
//go:build !ignoreWeaverGen

package domain

import (
	"dreamkast-weaver/internal/cfp/value"
	"fmt"
	"github.com/ServiceWeaver/weaver"
	"github.com/ServiceWeaver/weaver/runtime/codegen"
	"net"
	"time"
)

var _ codegen.LatestVersion = codegen.Version[[0][17]struct{}](`

ERROR: You generated this file with 'weaver generate' v0.17.0 (codegen
version v0.17.0). The generated code is incompatible with the version of the
github.com/ServiceWeaver/weaver module that you're using. The weaver module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/ServiceWeaver/weaver

We recommend updating the weaver module and the 'weaver generate' command by
running the following.

    go get github.com/ServiceWeaver/weaver@latest
    go install github.com/ServiceWeaver/weaver/cmd/weaver@latest

Then, re-run 'weaver generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/ServiceWeaver/weaver/issues.

`)

// weaver.Instance checks.

// weaver.Router checks.

// Local stub implementations.

// Client stub implementations.

// Server stub implementations.

// AutoMarshal implementations.

var _ codegen.AutoMarshal = (*CfpVote)(nil)

type __is_CfpVote[T ~struct {
	weaver.AutoMarshal
	TalkID    value.TalkID
	ClientIp  net.IP
	CreatedAt time.Time
}] struct{}

var _ __is_CfpVote[CfpVote]

func (x *CfpVote) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("CfpVote.WeaverMarshal: nil receiver"))
	}
	(x.TalkID).WeaverMarshal(enc)
	serviceweaver_enc_slice_byte_87461245(enc, ([]byte)(x.ClientIp))
	enc.EncodeBinaryMarshaler(&x.CreatedAt)
}

func (x *CfpVote) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("CfpVote.WeaverUnmarshal: nil receiver"))
	}
	(&x.TalkID).WeaverUnmarshal(dec)
	*(*[]byte)(&x.ClientIp) = serviceweaver_dec_slice_byte_87461245(dec)
	dec.DecodeBinaryUnmarshaler(&x.CreatedAt)
}

func serviceweaver_enc_slice_byte_87461245(enc *codegen.Encoder, arg []byte) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		enc.Byte(arg[i])
	}
}

func serviceweaver_dec_slice_byte_87461245(dec *codegen.Decoder) []byte {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]byte, n)
	for i := 0; i < n; i++ {
		res[i] = dec.Byte()
	}
	return res
}

var _ codegen.AutoMarshal = (*CfpVotes)(nil)

type __is_CfpVotes[T ~struct {
	weaver.AutoMarshal
	Items []CfpVote
}] struct{}

var _ __is_CfpVotes[CfpVotes]

func (x *CfpVotes) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("CfpVotes.WeaverMarshal: nil receiver"))
	}
	serviceweaver_enc_slice_CfpVote_9206e939(enc, x.Items)
}

func (x *CfpVotes) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("CfpVotes.WeaverUnmarshal: nil receiver"))
	}
	x.Items = serviceweaver_dec_slice_CfpVote_9206e939(dec)
}

func serviceweaver_enc_slice_CfpVote_9206e939(enc *codegen.Encoder, arg []CfpVote) {
	if arg == nil {
		enc.Len(-1)
		return
	}
	enc.Len(len(arg))
	for i := 0; i < len(arg); i++ {
		(arg[i]).WeaverMarshal(enc)
	}
}

func serviceweaver_dec_slice_CfpVote_9206e939(dec *codegen.Decoder) []CfpVote {
	n := dec.Len()
	if n == -1 {
		return nil
	}
	res := make([]CfpVote, n)
	for i := 0; i < n; i++ {
		(&res[i]).WeaverUnmarshal(dec)
	}
	return res
}

var _ codegen.AutoMarshal = (*VoteCount)(nil)

type __is_VoteCount[T ~struct {
	weaver.AutoMarshal
	TalkID value.TalkID
	Count  int
}] struct{}

var _ __is_VoteCount[VoteCount]

func (x *VoteCount) WeaverMarshal(enc *codegen.Encoder) {
	if x == nil {
		panic(fmt.Errorf("VoteCount.WeaverMarshal: nil receiver"))
	}
	(x.TalkID).WeaverMarshal(enc)
	enc.Int(x.Count)
}

func (x *VoteCount) WeaverUnmarshal(dec *codegen.Decoder) {
	if x == nil {
		panic(fmt.Errorf("VoteCount.WeaverUnmarshal: nil receiver"))
	}
	(&x.TalkID).WeaverUnmarshal(dec)
	x.Count = dec.Int()
}
